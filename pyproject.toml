[tool.poetry]
name = "retry-tasks-lib"
version = "0.0.0"
description = "helpers functions and models for setting up tasks with rq"
authors = ["Bink <bink@bink.bink>"]
readme = "README.md"
repository = "https://github.com/binkhq/retry-tasks-lib"
keywords = ["rq", "sqlalchemy", "flask_admin"]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
]
packages = [
    { include = "retry_tasks_lib" },
]

[tool.poetry.dependencies]
python = "^3.11"
rq = "^1.10.0"
SQLAlchemy = "^2.0.0"
requests = "^2.31.0"
sentry-sdk = "^1.15.0"
Flask-Admin = { version = "^1.5.8", optional = true }
prometheus-client = {version = "^0.14.1", optional = true }

[tool.poetry.extras]
admin = ["Flask-Admin"]
reporting = ["prometheus-client"]

[tool.poetry.group.dev.dependencies]
black = "^22.3.0"
isort = "^5.9.3"
mypy = "^1.0.0"
xenon = "^0.9.1"
types-requests = "^2.25.9"
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
pytest-asyncio = "^0.15.1"
pytest-mock = "^3.6.1"
ipython = "^8.10.0"
python-dotenv = "^0.19.1"
types-redis = "^3.5.15"
psycopg = "^3.1.8"
ruff = "^0.0.254"
refurb = "^1.13.0"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = false
lines_between_types = 1

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
warn_unused_ignores = true
ignore_missing_imports = true

[tool.pylint.MASTER]
load-plugins=[
    "pylint_pytest",
    "pylint.extensions.mccabe"
]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "logging-fstring-interpolation",
    "missing-module-docstring",
    "missing-function-docstring",
    "missing-class-docstring",
    "too-few-public-methods",
    "duplicate-code", # a lot of logic will be similar between sync and async methods but this is expected
]
good-names=["k", "v", "i", "q", "fn", "ex"]

[tool.poetry-dynamic-versioning]
enable = true

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.ruff]
line-length = 120
show-source = true
target-version = "py311"
select = [
    "F",    # Pyflakes (F)
    "E",
    "W",    # pycodestyle (E, W)
    "C90",  # mccabe (C90)
    # isort (I)
    # pydocstyle (D)
    "UP",   # pyupgrade (UP)
    "N",    # pep8-naming (N)
    "YTT",  # flake8-2020 (YTT)
    "ANN",  # flake8-annotations (ANN)
    "S",    # flake8-bandit (S)
    "BLE",  # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",    # flake8-bugbear (B)
    "A",    # flake8-builtins (A)
    "C4",   # flake8-comprehensions (C4)
    "T10",  # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN",  # flake8-import-conventions (ICN)
    "T20",  # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM",  # flake8-simplify (SIM)
    "TID",  # flake8-tidy-imports (TID)
    "ARG",  # flake8-unused-arguments (ARG)
    "DTZ",  # flake8-datetimez (DTZ)
    # "ERA",  # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW",  # Pylint (PLC, PLE, PLR, PLW)
    "RUF",  # Ruff-specific rules (RUF)
]
ignore = [
    "ANN101",
    "ANN102",
    # disables function call in function parameter error
    # arg = Depends(..) and arg = typer.Option(..) would be flagged
    "B008",
    "PLR2004" # disable Magic value used in comparison
]

[tool.ruff.per-file-ignores]
# disable unused import error for __init__.py and cosmos/db/base.py
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ARG001", "PLR0913", "PLR0915", "ARG002"]
